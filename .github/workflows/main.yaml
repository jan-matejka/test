name: GHA Testing - Main Workflow

on: [push]

concurrency:
  # Automatically cancel workflows if newer workflow started for the same
  # branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
#  # give up on this. 1. I dont know typescript yet.
#  2. its impossible to debug anyway as the trace of this job is useless.
#  3. seems slower than curl anyway
#  call:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Trigger Reusable Workflow
#        env:
#          REF: ${{ github.ref }}
#          BEFORE: ${{ github.event.before }}
#          AFTER: ${{ github.event.after }}
#        uses: actions/github-script@v7
#        with:
#          script: |
#            const {owner, repo} = context.repo();
#            x = github.rest.actions.createWorkflowDispatch({
#              owner: owner,
#              repo: repo,
#              workflow_id: "called.yaml",
#              ref: context.ref,
#              inputs: {
#                before: context.payload.event.before,
#                after: context.payload.event.after,
#              },
#            });
#            return x;
#        id: reusable-js

  call-sh:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Reusable Workflow
        id: trigger
        env:
          REF: ${{ github.ref }}
          BEFORE: ${{ github.event.before }}
          AFTER: ${{ github.event.after }}
        run: |
          repo_token="${{ secrets.GITHUB_TOKEN }}"
          workflow_file="called.yaml"
          payload="{\"ref\": \"$REF\", \"inputs\": {\"before\":\"${BEFORE}\", \"after\": \"${AFTER}\"}}"
          response=$(curl -X POST "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${workflow_file}/dispatches" \
            -H "Authorization: Bearer $repo_token" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "$payload")
          echo "$response"

      - name: show status
        if: always()
        run:
          echo outcome ${{ steps.trigger.outcome }}
          echo conclusion ${{ steps.trigger.conclusion }}
          echo ${{ toJSON(steps.trigger.outputs) }}


# jobs:
#   analyze:
#     runs-on: ubuntu-latest
#     outputs:
#       branch_tag: ${{ steps.branch-tag.outputs.branch_tag }}
#       # It would make sense to run these within the image build job so we can
#       # refer to outputs like:
#       # - needs.base-debian.outputs.tag
#       # - needs.base-debian.outputs.is_changed
#       #
#       # However, then we would'be wasting checkouts just to determine there is
#       # no change and set the tag.
#       base-debian-tag: ${{ steps.tags.outputs.base_debian_tag }}
#       base-debian: ${{ steps.tags.outputs.base_debian_changed }}
#       telemetry: ${{ steps.tags.outputs.telemetry_changed }}
#       runtime-1: ${{ steps.tags.outputs.runtime_1_changed }}
#       test-runtime-1: ${{ steps.tags.outputs.test_runtime_1_changed }}
#     steps:
#       # TBD: check if $ref_name exists in registry, otheriwse build.
#       - uses: actions/checkout@v4
#         with:
#           # Just fetch everything here.
#           # The tj-actions/changed-files action is not smart enough to fetch
#           # whatever amount it actually needs.
#           fetch-depth: 0
# 
#       - run: false
# 
#       - id: branch-tag
#         env:
#           ref_name: ${{ github.ref_name }}
#         run: |
#           echo "branch_tag=$ref_name" | sed 's#/#__#g' >> "${GITHUB_ENV}"
#           echo "branch_tag=$ref_name" | sed 's#/#__#g' >> "${GITHUB_OUTPUT}"
# 
#       - id: changes
#         uses: tj-actions/changed-files@v45
#         with:
#           files_yaml: |
#             base_debian:
#               - container/base-debian/**
#             runtime_1:
#               # base debian:
#               - container/base-debian/**
#               # runtime-1:
#               - container/base-runtime-1/**
#             telemetry:
#               # telemetry:
#               - container/telemetry/**
#             test_runtime_1:
#               # telemetry:
#               - container/telemetry/**
#               # base debian:
#               - container/base-debian/**
#               # runtime-1:
#               - container/base-runtime-1/**
# 
#       - id: tags
#         env:
#           sha: ${{ github.sha }}
#           base_debian_changed: ${{ steps.changes.outputs.base_debian_any_changed }}
#           runtime_1_changed: ${{ steps.changes.outputs.runtime_1_any_changed }}
#           telemetry_changed: ${{ steps.changes.outputs.telemetry_any_changed }}
#         run: |
#           function mk_output {
#             local changed=$1
#             local name=$2
#             {
#               $changed && {
#                 printf "%s_tag=%s\n" $name $sha
#                 printf "%s_changed=true\n" $name
#               } || {
#                 printf "%s_tag=%s\n" $name $branch_tag
#                 printf "%s_changed=false\n" $name
#               }
#             } >> "${GITHUB_OUTPUT}"
#           }
#           set -x;
#           mk_output ${base_debian_changed} base_debian;
#           mk_output ${runtime_1_changed} runtime_1;
#           mk_output ${telemetry_changed} telemetry;
# 
#   build-base-debian:
#     runs-on: ubuntu-latest
#     needs:
#       - analyze
#     steps:
#       - uses: actions/checkout@v4
#         if: needs.analyze.outputs.base-debian == 'true'
#       - uses: "./.github/actions/build-image"
#         if: needs.analyze.outputs.base-debian == 'true'
#         with:
#           branch_tag: ${{ needs.analyze.outputs.branch_tag }}
#           image: base-debian
#           registry: ghcr.io/${{ github.repository_owner }}
#           registry_user: ${{ github.actor }}
#           registry_pass: ${{ secrets.GITHUB_TOKEN }}
# 
#   build-base-runtime-1:
#     if: true
#     runs-on: ubuntu-latest
#     needs:
#       - analyze
#       - build-base-debian
#     steps:
#       - uses: actions/checkout@v4
#         if: needs.analyze.outputs.runtime-1 == 'true'
#       - uses: "./.github/actions/build-image"
#         if: needs.analyze.outputs.runtime-1 == 'true'
#         with:
#           base_tag: ${{ needs.analyze.outputs.base-debian-tag }}
#           branch_tag: ${{ needs.analyze.outputs.branch_tag }}
#           image: base-runtime-1
#           registry: ghcr.io/${{ github.repository_owner }}
#           registry_user: ${{ github.actor }}
#           registry_pass: ${{ secrets.GITHUB_TOKEN }}
# 
#   test-runtime-1:
#     if: needs.analyze.outputs.test-runtime-1 == 'true'
#     runs-on: ubuntu-latest
#     needs:
#       - analyze
#       - build-base-runtime-1
#     container:
#       image: ghcr.io/${{ github.repository }}_base-runtime-1:${{ github.sha }}
#       credentials:
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}
#     steps:
#       - run: grep runtime-1 /mark
# 
#   runtime-2:
#     if: false
#     needs:
#       - build-base-debian
#     uses: ./.github/workflows/runtime-2.yaml
#     secrets: inherit
# 
#   dump_contexts_to_log:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Dump GitHub context
#         env:
#           GITHUB_CONTEXT: ${{ toJson(github) }}
#         run: echo "$GITHUB_CONTEXT"
#       - name: Dump job context
#         env:
#           JOB_CONTEXT: ${{ toJson(job) }}
#         run: echo "$JOB_CONTEXT"
#       - name: Dump steps context
#         env:
#           STEPS_CONTEXT: ${{ toJson(steps) }}
#         run: echo "$STEPS_CONTEXT"
#       - name: Dump runner context
#         env:
#           RUNNER_CONTEXT: ${{ toJson(runner) }}
#         run: echo "$RUNNER_CONTEXT"
#       - name: Dump strategy context
#         env:
#           STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#         run: echo "$STRATEGY_CONTEXT"
#       - name: Dump matrix context
#         env:
#           MATRIX_CONTEXT: ${{ toJson(matrix) }}
#         run: echo "$MATRIX_CONTEXT"
